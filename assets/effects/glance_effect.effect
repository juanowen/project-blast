// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        width: { value: .5 }
        interval: { value: 3. }
        speed: { value: 2. }
        start_shift: { value: 0. }
        lerp_coef: { value: .25 }
        lerp_pow: { value: 2. }
        lerp_color: { value: [1., 1., 1., 1.], editor: { type: color }}
        alpha_threshold: { value: 0. }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <cc-global>
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif
  
  uniform Settings {
    vec4 lerp_color;

    float width;
    float interval;
    float speed;
    float start_shift;
    float lerp_coef;
    float lerp_pow;
    float alpha_threshold;
  };

  vec4 frag () {
    vec4 col = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      col = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      col *= color;

      if (col.a > alpha_threshold && col.r + col.g + col.b > 1.) {
        float shift = interval - mod(cc_time.x * speed + start_shift, interval * 2.); 
        float delta = uv0.x / 3. - uv0.y;
        float max_val = width / 1.5 + shift;
        float min_val = width / -1.5 + shift;

        if (delta < max_val && delta > min_val) {
          float coef = max(0., 1. - abs(((delta - shift) / (max_val - min_val)) / width));
          col = mix(col, lerp_color, pow(coef, lerp_pow) * lerp_coef);
        }
      }
    #endif

    return col;
  }
}%
